/*
 *       Copyright (c) 2017.  Preston Garno
 *
 *        Licensed under the Apache License, Version 2.0 (the "License");
 *        you may not use this file except in compliance with the License.
 *        You may obtain a copy of the License at
 *
 *            http://www.apache.org/licenses/LICENSE-2.0
 *
 *        Unless required by applicable law or agreed to in writing, software
 *        distributed under the License is distributed on an "AS IS" BASIS,
 *        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *        See the License for the specific language governing permissions and
 *        limitations under the License.
 */

group 'CompilerTest'
version '0.1'

apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    flatDir { dirs '../libs'}
}

dependencies {
    compile 'com.squareup:javapoet:1.8.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'com.google.testing.compile:compile-testing:0.10'
    testCompile ':dynamic-mvp:0.1'
}

clean {
    delete('../ExampleApplication/libs/mvp-compiler-0.1.jar')
}

jar {
    dependsOn {
//        ':mvp-compiler:clean'
//        ':mvp-compiler:compileJava'
    }
    from('build/classes/main/')

    from('build/resources/main')

    manifest {
        attributes 'Manifest-Version': '1.0',
                'Implementation-Version': version,
                'Dynamic-MVP': 'Compile-time dependency injection using ' +
                        'annotation processing for reusable presenters, ' +
                        'events, and event handling',
                'Content-Type': 'Compiler plugin',
                'Created-By': 'Preston Garno',
                'Library-Name': 'mvp-compiler',
                'Repositories': 'https://github.com/prestongarno/Dynamic-MVP'
    }
    //change this once working with Dyn-MVP main again
    destinationDir = file('../libs')
    baseName = 'mvp-compiler-' + version
    archiveName = baseName + '.jar'
    println('making mvp-compiler.jar')
}

sourceSets {
    main {
        java { srcDirs = ['./src/main/java'] }
        resources { srcDirs = ['./src/main/resources'] }
    }
    test {
        java {
            srcDirs = ['./src/test/java']
        }
        resources {
            srcDirs = ['./src/test/resources']
        }
    }
}
